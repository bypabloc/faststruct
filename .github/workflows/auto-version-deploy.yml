name: Auto Version and Deploy

on:
  push:
    branches:
      - master
      - main

jobs:
  version-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
      - name: Get last published version
        id: last_published
        run: |
          # Get the version from VS Code Marketplace
          PUBLISHED_VERSION=$(npx vsce show the-full-stack.faststruct --json | jq -r '.versions[0].version' || echo "0.0.0")
          echo "published_version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "Last published version: $PUBLISHED_VERSION"
          
      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in package.json: $CURRENT_VERSION"
          
      - name: Check if version was manually changed
        id: version_check
        run: |
          PUBLISHED="${{ steps.last_published.outputs.published_version }}"
          CURRENT="${{ steps.current.outputs.current_version }}"
          
          # Compare versions
          if [ "$PUBLISHED" != "$CURRENT" ]; then
            echo "Version was manually changed from $PUBLISHED to $CURRENT"
            echo "manual_change=true" >> $GITHUB_OUTPUT
          else
            echo "Version was not manually changed"
            echo "manual_change=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Auto increment version
        id: new_version
        if: steps.version_check.outputs.manual_change == 'false'
        run: |
          CURRENT="${{ steps.current.outputs.current_version }}"
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment minor version
          MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$MINOR.0"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incrementing version to: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
      - name: Commit version change
        if: steps.version_check.outputs.manual_change == 'false'
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }} [skip ci]"
          git push origin HEAD:${{ github.ref_name }}
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run tests
        run: pnpm test
        
      - name: Compile
        run: pnpm run compile
        
      - name: Install vsce
        run: pnpm add -g @vscode/vsce
        
      - name: Package extension
        run: vsce package --no-dependencies
        
      - name: Publish to VS Code Marketplace
        run: vsce publish -p ${{ secrets.VSCE_PAT }} --no-dependencies
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          
      - name: Cherry-pick to dev branch
        if: steps.version_check.outputs.manual_change == 'false'
        continue-on-error: true
        run: |
          # Get the commit hash of the version bump
          VERSION_COMMIT=$(git rev-parse HEAD)
          
          # Checkout dev branch
          git checkout dev
          git pull origin dev
          
          # Cherry-pick the version commit
          git cherry-pick $VERSION_COMMIT || {
            echo "Cherry-pick failed, attempting to resolve conflicts automatically"
            # In case of conflict, take the version from main
            git checkout --theirs package.json
            git add package.json
            git cherry-pick --continue || echo "Cherry-pick failed, manual intervention needed"
          }
          
          # Push to dev
          git push origin dev || echo "Push to dev failed, manual intervention needed"